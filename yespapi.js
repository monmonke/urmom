(()=>{"use strict";var __webpack_modules__={"./node_modules/@vrpjs/client/lib/IdGenerator.js":(__unused_webpack_module,exports)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nclass IdGenerator {\r\n    constructor() {\r\n        this._max = 0;\r\n        this._ids = [];\r\n    }\r\n    gen() {\r\n        var _a;\r\n        return (_a = this._ids.pop()) !== null && _a !== void 0 ? _a : this._max++;\r\n    }\r\n    free(id) {\r\n        this._ids.push(id);\r\n    }\r\n    clear() {\r\n        this._max = 0;\r\n        this._ids = [];\r\n    }\r\n}\r\nexports.default = IdGenerator;\r\n\n\n//# sourceURL=webpack://resource-name/./node_modules/@vrpjs/client/lib/IdGenerator.js?')},"./node_modules/@vrpjs/client/lib/VrpProxy.js":function(__unused_webpack_module,exports,__webpack_require__){eval('\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.addInterface = exports.getInterface = void 0;\r\nconst IdGenerator_1 = __webpack_require__(/*! ./IdGenerator */ "./node_modules/@vrpjs/client/lib/IdGenerator.js");\r\nfunction getInterface(name, identifier = GetCurrentResourceName()) {\r\n    const ids = new IdGenerator_1.default();\r\n    const callbacks = {};\r\n    on(`${name}:${identifier}:proxy_res`, (id, payloads) => {\r\n        const callback = callbacks[id];\r\n        if (callback) {\r\n            delete callbacks[id];\r\n            ids.free(id);\r\n            callback(payloads.length <= 1 ? payloads[0] : payloads);\r\n        }\r\n    });\r\n    function generateHandler(memberName) {\r\n        return (...args) => {\r\n            if (memberName.startsWith(\'_\')) {\r\n                return emit(`${name}:proxy`, memberName.substring(1), args, identifier, -1);\r\n            }\r\n            let responseReady = false;\r\n            let response;\r\n            const promise = new Promise(resolve => {\r\n                const id = ids.gen();\r\n                callbacks[id] = value => {\r\n                    responseReady = true;\r\n                    response = value;\r\n                    resolve(response);\r\n                };\r\n                emit(`${name}:proxy`, memberName, args, identifier, id);\r\n            });\r\n            return responseReady ? response : promise;\r\n        };\r\n    }\r\n    return new Proxy({}, {\r\n        get(target, member) {\r\n            const memberName = member.toString();\r\n            if (!target[memberName]) {\r\n                target[memberName] = generateHandler(memberName);\r\n            }\r\n            return target[memberName];\r\n        },\r\n        set() {\r\n            throw new Error(\'cannot set values on proxy access interface\');\r\n        },\r\n    });\r\n}\r\nexports.getInterface = getInterface;\r\nfunction addInterface(name, handlers) {\r\n    on(`${name}:proxy`, (member, args, identifier, id) => __awaiter(this, void 0, void 0, function* () {\r\n        const handler = handlers[member];\r\n        let payload;\r\n        if (handler) {\r\n            try {\r\n                payload = yield handler(...args);\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        else {\r\n            console.log(`error: proxy call ${name}:${member} not found`);\r\n        }\r\n        if (id >= 0) {\r\n            emit(`${name}:${identifier}:proxy_res`, id, [payload]);\r\n        }\r\n    }));\r\n}\r\nexports.addInterface = addInterface;\r\n\n\n//# sourceURL=webpack://resource-name/./node_modules/@vrpjs/client/lib/VrpProxy.js?')},"./node_modules/@vrpjs/client/lib/VrpTunnel.js":function(__unused_webpack_module,exports,__webpack_require__){eval('\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.bindInterface = exports.getInterface = void 0;\r\nconst IdGenerator_1 = __webpack_require__(/*! ./IdGenerator */ "./node_modules/@vrpjs/client/lib/IdGenerator.js");\r\nfunction getInterface(name, identifier = GetCurrentResourceName()) {\r\n    const ids = new IdGenerator_1.default();\r\n    const callbacks = {};\r\n    onNet(`${name}:${identifier}:tunnel_res`, (id, payloads) => {\r\n        const callback = callbacks[id];\r\n        if (callback) {\r\n            delete callbacks[id];\r\n            ids.free(id);\r\n            callback(payloads.length <= 1 ? payloads[0] : payloads);\r\n        }\r\n    });\r\n    function generateHandler(memberName) {\r\n        return (...args) => {\r\n            if (memberName.startsWith(\'_\')) {\r\n                return emitNet(`${name}:tunnel_req`, memberName.substring(1), args, identifier, -1);\r\n            }\r\n            return new Promise(resolve => {\r\n                const id = ids.gen();\r\n                callbacks[id] = resolve;\r\n                emitNet(`${name}:tunnel_req`, memberName, args, identifier, id);\r\n            });\r\n        };\r\n    }\r\n    return new Proxy({}, {\r\n        get(target, member) {\r\n            const memberName = member.toString();\r\n            if (!target[memberName]) {\r\n                target[memberName] = generateHandler(memberName);\r\n            }\r\n            return target[memberName];\r\n        },\r\n        set() {\r\n            throw new Error("set isn\'t supported on Tunnel access");\r\n        },\r\n    });\r\n}\r\nexports.getInterface = getInterface;\r\nfunction bindInterface(name, handlers) {\r\n    onNet(`${name}:tunnel_req`, (member, args, identifier, id) => __awaiter(this, void 0, void 0, function* () {\r\n        const handler = handlers[member];\r\n        let payload;\r\n        if (handler) {\r\n            try {\r\n                payload = yield handler(...args);\r\n            }\r\n            catch (err) {\r\n                console.error(err);\r\n            }\r\n        }\r\n        if (id >= 0) {\r\n            emitNet(`${name}:${identifier}:tunnel_res`, id, [payload]);\r\n        }\r\n    }));\r\n}\r\nexports.bindInterface = bindInterface;\r\n\n\n//# sourceURL=webpack://resource-name/./node_modules/@vrpjs/client/lib/VrpTunnel.js?')},"./node_modules/@vrpjs/client/lib/index.js":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.VrpProxy = exports.VrpTunnel = exports.IdGenerator = void 0;\r\nexports.IdGenerator = __webpack_require__(/*! ./IdGenerator */ "./node_modules/@vrpjs/client/lib/IdGenerator.js");\r\nexports.VrpTunnel = __webpack_require__(/*! ./VrpTunnel */ "./node_modules/@vrpjs/client/lib/VrpTunnel.js");\r\nexports.VrpProxy = __webpack_require__(/*! ./VrpProxy */ "./node_modules/@vrpjs/client/lib/VrpProxy.js");\r\n\n\n//# sourceURL=webpack://resource-name/./node_modules/@vrpjs/client/lib/index.js?')},"./client/client.ts":function(__unused_webpack_module,exports,__webpack_require__){eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.Spawned = void 0;\r\nconst Wait_1 = __webpack_require__(/*! ../shared/Wait */ \"./shared/Wait.ts\");\r\nconst vRP_1 = __webpack_require__(/*! ./lib/Modules/vRP */ \"./client/lib/Modules/vRP.ts\");\r\nexports.Spawned = false;\r\nlet Authorized = false;\r\non('playerSpawned', () => {\r\n    exports.Spawned = true;\r\n});\r\nonNet('initClient', (value) => {\r\n    Authorized = true;\r\n    if (value === 'vRP') {\r\n        console.log('Client Side Loaded');\r\n        new vRP_1.vRPModule.Init();\r\n    }\r\n    else if (value === 'ESX') {\r\n    }\r\n});\r\n(() => __awaiter(void 0, void 0, void 0, function* () {\r\n    while (!Authorized) {\r\n        emitNet('initModule');\r\n        yield Wait_1.Wait(2000);\r\n    }\r\n}))();\r\n\n\n//# sourceURL=webpack://resource-name/./client/client.ts?")},"./client/lib/Menu/index.ts":(__unused_webpack_module,exports,__webpack_require__)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.CoraUI = void 0;\r\nconst utils_1 = __webpack_require__(/*! ./utils */ "./client/lib/Menu/utils.ts");\r\nlet init = true;\r\nclass CoraUI {\r\n    static drawHeader() {\r\n        let Glare = RequestScaleformMovie("MP_MENU_GLARE");\r\n        if (this.Menu.Opened == true) {\r\n            DrawRect(this.Config.x, this.Config.y, this.Config.width, this.Config.headerHeight, this.Config.colors.dark.header[0], this.Config.colors.dark.header[1], this.Config.colors.dark.header[2], this.Config.colors.dark.header[3]);\r\n            if (this.CurrentMenu.glare) {\r\n                PushScaleformMovieFunction(Glare, "initScreenLayout");\r\n                PopScaleformMovieFunctionVoid();\r\n                DrawScaleformMovie(Glare, this.Config.x + 0.297, this.Config.y + 0.3985, this.Config.width + 0.7, this.Config.headerHeight + 0.953, 255, 0, 0, 255, 0);\r\n            }\r\n            utils_1.DrawText2(this.CurrentMenu.name, this.Config.x - 0.095, this.Config.y - 0.024, 0.75, 1, [0, 255, 0, 255], false, 2);\r\n            DrawRect(this.Config.x, this.Config.y + (this.Config.headerHeight - 0.03065), this.Config.width, this.Config.bottomHeight + 0.003, this.Config.colors.dark.header[0], this.Config.colors.dark.header[1], this.Config.colors.dark.header[2], 230);\r\n            utils_1.DrawText2(this.CurrentMenu.subtitle, this.Config.x - 0.1075, this.Config.y + (this.Config.headerHeight - 0.042), 0.265, 0, [255, 255, 255, 255], false, 2);\r\n            utils_1.DrawText2(this.Menu.IndexButton + 1 + "/" + this.CurrentMenu.buttons.length, this.Config.x + 0.1, this.Config.y + (this.Config.headerHeight - 0.041), 0.265, 0, [255, 255, 255, 255], true, 2.5);\r\n        }\r\n    }\r\n    static drawButtons() {\r\n        if (this.Menu.Opened == true) {\r\n            let startIndex = Math.max(0, this.Menu.IndexButton - 9);\r\n            let endIndex = Math.min(this.CurrentMenu.buttons.length, startIndex + 10);\r\n            let startY = this.Config.y + (this.Config.bottomHeight + 0.0055);\r\n            if (this.CurrentMenu.heritagePanel == true) {\r\n                startY += 0.203;\r\n            }\r\n            for (let i = startIndex; i < endIndex; i++) {\r\n                if (this.CurrentMenu.buttons[i].checkbox !== null && init) {\r\n                    this.CurrentMenu.buttons[i].statusCheckbox = false;\r\n                    init = false;\r\n                }\r\n                const color = i == this.Menu.IndexButton ? [255, 255, 255, 255] : [16, 16, 16, 120];\r\n                const colorText = i == this.Menu.IndexButton ? [0, 0, 0, 255] : [255, 255, 255, 255];\r\n                const checkboxColor = i == this.Menu.IndexButton ? [0, 0, 0, 255] : [255, 255, 255, 255];\r\n                const lenghtforright2 = this.CurrentMenu.buttons[i].rightText || "";\r\n                const lenghtforright = lenghtforright2.length || 0;\r\n                DrawRect(this.Config.x, startY +\r\n                    (this.Config.bottomHeight * (i - startIndex + 1) + 0.033), this.Config.width, this.Config.bottomHeight + 0.0011, color[0], color[1], color[2], color[3]);\r\n                utils_1.DrawText2(this.CurrentMenu.buttons[i].name, this.Config.x - 0.1075, startY + 0.022 +\r\n                    (this.Config.bottomHeight * (i - startIndex + 1)), 0.265, 0, [colorText[0], colorText[1], colorText[2], colorText[3]], false, 2);\r\n                if (this.CurrentMenu.buttons[i].rightText) {\r\n                    const lenght = this.CurrentMenu.buttons[i].rightText || "";\r\n                    utils_1.DrawText2(this.CurrentMenu.buttons[i].rightText || "", this.Config.x + 0.102 - lenght.length / 1000, startY + 0.0225 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.235, 0, [colorText[0], colorText[1], colorText[2], colorText[3]], true, 2);\r\n                }\r\n                if (this.CurrentMenu.buttons[i].checkbox) {\r\n                    if (this.CurrentMenu.buttons[i].statusCheckbox) {\r\n                        if (i == this.Menu.IndexButton) {\r\n                            utils_1.RenderSprite(this.Config.SettingsCheckbox.Dictionary, this.Config.SettingsCheckbox.TexturesCheckedOver, this.Config.x + 0.094, startY +\r\n                                (this.Config.bottomHeight * (i - startIndex + 1) + 0.018), this.Config.width - 0.2078, this.Config.bottomHeight + 0.0014, 0, 255, 255, 255, 255);\r\n                        }\r\n                        else {\r\n                            utils_1.RenderSprite(this.Config.SettingsCheckbox.Dictionary, this.Config.SettingsCheckbox.TexturesChecked, this.Config.x + 0.094, startY +\r\n                                (this.Config.bottomHeight * (i - startIndex + 1) + 0.018), this.Config.width - 0.2078, this.Config.bottomHeight + 0.0014, 0, 255, 255, 255, 255);\r\n                        }\r\n                    }\r\n                    else {\r\n                        utils_1.RenderSprite(this.Config.SettingsCheckbox.Dictionary, this.Config.SettingsCheckbox.TexturesUnchecked, this.Config.x + 0.094, startY +\r\n                            (this.Config.bottomHeight * (i - startIndex + 1) + 0.018), this.Config.width - 0.2078, this.Config.bottomHeight + 0.0014, 90, checkboxColor[0], checkboxColor[1], checkboxColor[2], checkboxColor[3]);\r\n                    }\r\n                }\r\n                if (this.CurrentMenu.buttons[i].slider) {\r\n                    const slider = this.CurrentMenu.buttons[i].slider || [];\r\n                    const index = this.CurrentMenu.buttons[i].indexSlider || 0;\r\n                    const lenght = slider[index] || "";\r\n                    let LengthToGive = lenght.length / 1000;\r\n                    if (lenght.length >= 9) {\r\n                        LengthToGive = lenght.length / 350;\r\n                    }\r\n                    let LengthToGive2 = lenght.length / 1000;\r\n                    if (lenght.length >= 9) {\r\n                        LengthToGive2 = lenght.length / 600;\r\n                    }\r\n                    DrawSprite("commonmenu", "arrowleft", this.Config.x + 0.0775 - LengthToGive, startY + 0.033 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.009, 0.018, 0.0, colorText[0], colorText[1], colorText[2], colorText[3]);\r\n                    utils_1.DrawText2(slider[index] || "", this.Config.x + 0.0935 - LengthToGive2, startY + 0.023 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.235, 0, [colorText[0], colorText[1], colorText[2], colorText[3]], true, 2);\r\n                    DrawSprite("commonmenu", "arrowright", this.Config.x + 0.1045, startY + 0.033 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.009, 0.018, 0.0, colorText[0], colorText[1], colorText[2], colorText[3]);\r\n                }\r\n                if (this.CurrentMenu.buttons[i].slideNum) {\r\n                    let slider = [];\r\n                    const index = this.CurrentMenu.buttons[i].indexSlider || 0;\r\n                    const slideNum = this.CurrentMenu.buttons[i].slideNum || 0;\r\n                    for (let z = 0; z <= slideNum; z++) {\r\n                        slider.push(z.toString());\r\n                    }\r\n                    DrawSprite("commonmenu", "arrowleft", this.Config.x + 0.089, startY + 0.033 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.009, 0.018, 0.0, colorText[0], colorText[1], colorText[2], colorText[3]);\r\n                    utils_1.DrawText2(slider[index] || "", this.Config.x + 0.097, startY + 0.023 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.235, 0, [colorText[0], colorText[1], colorText[2], colorText[3]], true, 2);\r\n                    DrawSprite("commonmenu", "arrowright", this.Config.x + 0.1045, startY + 0.033 +\r\n                        (this.Config.bottomHeight * (i - startIndex + 1)), 0.009, 0.018, 0.0, colorText[0], colorText[1], colorText[2], colorText[3]);\r\n                }\r\n                if (this.CurrentMenu.buttons[i].onPourcentage !== undefined &&\r\n                    i == this.Menu.IndexButton) {\r\n                    if (this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage ==\r\n                        undefined) {\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage = 0;\r\n                    }\r\n                    this.DrawPercentagePanel(this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage +\r\n                        "%");\r\n                }\r\n                if (this.CurrentMenu.buttons[i].onColorPanel !== undefined &&\r\n                    i == this.Menu.IndexButton) {\r\n                    this.DrawColorPanel();\r\n                }\r\n                if (this.CurrentMenu.heritagePanel) {\r\n                    this.DrawHeritagePanel();\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static DrawColorPanel(Title, Colors, MinimumIndex, MaximumIndex) {\r\n        const buttonsLenght = this.CurrentMenu.buttons.length > 10 ? 10 : this.CurrentMenu.buttons.length;\r\n        const ColorArray = Colors || this.Config.ColoursPanel;\r\n        let ColorAct = [];\r\n        this.CurrentMenu.buttons[this.Menu.IndexButton].lenghtColorPanel =\r\n            ColorArray.length;\r\n        const colorText = [255, 255, 255, 255];\r\n        const lenghtforTitle2 = Title || "Colors";\r\n        const lenghtforTitle = lenghtforTitle2.length || 0;\r\n        this.CurrentMenu.buttons[this.Menu.IndexButton].showColorPanel = 8;\r\n        const indexAColorPanel = this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel || 0;\r\n        let indexColorPanel = this.CurrentMenu.buttons[this.Menu.IndexButton].showColorPanel || 8;\r\n        let MaximumToShow = (ColorArray.length > 8 && 8) || ColorArray.length > 8;\r\n        DrawRect(this.Config.x, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.201) +\r\n            0.304, this.Config.width - 0.45, this.Config.bottomHeight + 0.065, 0, 0, 0, 105); // background\r\n        utils_1.DrawText2(Title || "Colors", this.Config.x - 0.004 - lenghtforTitle / 1000, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.201) +\r\n            0.263, this.Config.SettingsPercentagePanel.Text.Middle.Scale, 6, [colorText[0], colorText[1], colorText[2], colorText[3]], false, 2);\r\n        DrawSprite("commonmenu", "arrowleft", this.Config.x - 0.105, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.188) +\r\n            0.263, 0.009, 0.018, 0.0, colorText[0], colorText[1], colorText[2], colorText[3]);\r\n        DrawSprite("commonmenu", "arrowright", this.Config.x + 0.105, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.188) +\r\n            0.263, 0.009, 0.018, 0.0, colorText[0], colorText[1], colorText[2], colorText[3]);\r\n        const startIndex = Math.max(0, indexAColorPanel - 7);\r\n        const endIndex = Math.min(ColorArray.length, startIndex + 8);\r\n        const rectWidth = this.Config.colorProps - 0.0175;\r\n        const startX = this.Config.x - rectWidth * 3.5;\r\n        for (let ColorIndex = startIndex; ColorIndex < endIndex; ColorIndex++) {\r\n            let rgb = ColorIndex == indexAColorPanel\r\n                ? [\r\n                    this.Config.ColoursPanel[ColorIndex][0],\r\n                    this.Config.ColoursPanel[ColorIndex][1],\r\n                    this.Config.ColoursPanel[ColorIndex][2],\r\n                    this.Config.ColoursPanel[ColorIndex][3] - 150,\r\n                ]\r\n                : [\r\n                    this.Config.ColoursPanel[ColorIndex][0],\r\n                    this.Config.ColoursPanel[ColorIndex][1],\r\n                    this.Config.ColoursPanel[ColorIndex][2],\r\n                    this.Config.ColoursPanel[ColorIndex][3],\r\n                ];\r\n            DrawRect(startX + rectWidth * (ColorIndex - startIndex), this.Config.y +\r\n                (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                    0.201) +\r\n                0.3185, rectWidth, this.Config.colorProps, rgb[0], rgb[1], rgb[2], rgb[3]); // Colors\r\n        }\r\n        DrawRect(startX + rectWidth * Math.min(indexAColorPanel, 7), this.Config.y + (this.Config.bottomHeight * (buttonsLenght + 1) - 0.201) + 0.3185 - this.Config.colorProps / 2 - 0.002, rectWidth, 0.004, 255, 255, 255, 255); // Colors\r\n    }\r\n    static DrawPercentagePanel(TextHeader) {\r\n        const colorText = [255, 255, 255, 255];\r\n        const lenghtforPercentage2 = TextHeader || "Percentage";\r\n        const lenghtforPercentage = lenghtforPercentage2.length || 0;\r\n        const buttonsLenght = this.CurrentMenu.buttons.length > 10 ? 10 : this.CurrentMenu.buttons.length;\r\n        const percentage = this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage || 100;\r\n        DrawRect(this.Config.x, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.208) +\r\n            0.2935, this.Config.width - 0.45, this.Config.bottomHeight + 0.0294, 0, 0, 0, 105); // background\r\n        utils_1.DrawRectg(this.Config.x - 0.103, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.201) +\r\n            0.2935, this.Config.width - 0.017, 0.008, [0, 0, 0, 120]);\r\n        utils_1.DrawRectg(this.Config.x - 0.103, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.201) +\r\n            0.2935, (this.Config.width - 0.017) / utils_1.calc(percentage), 0.008, [255, 255, 255, 255]);\r\n        utils_1.DrawText2(TextHeader || "Percentage", this.Config.x - 0.004 - lenghtforPercentage / 1000, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.208) +\r\n            0.2695, this.Config.SettingsPercentagePanel.Text.Middle.Scale, 6, [colorText[0], colorText[1], colorText[2], colorText[3]], false, 2);\r\n        utils_1.DrawText2("0%", this.Config.x - 0.1045, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.208) +\r\n            0.2695, this.Config.SettingsPercentagePanel.Text.Middle.Scale, 6, [colorText[0], colorText[1], colorText[2], colorText[3]], false, 2);\r\n        utils_1.DrawText2("100%", this.Config.x + 0.087, this.Config.y +\r\n            (this.Config.bottomHeight * (buttonsLenght + 1) -\r\n                0.208) +\r\n            0.2695, this.Config.SettingsPercentagePanel.Text.Middle.Scale, 6, [colorText[0], colorText[1], colorText[2], colorText[3]], false, 2);\r\n    }\r\n    static DrawHeritagePanel() {\r\n        const indexHeritagePanel = this.CurrentMenu.indexHeritagePanel || [0, 0, 0, 0];\r\n        // DrawRect(\r\n        //     this.Config.x,\r\n        //     this.Config.y +\r\n        //         (this.Config.bottomHeight + 0.0055) +\r\n        //         (this.Config.bottomHeight * (i - startIndex + 1) + 0.033),\r\n        //     this.Config.width,\r\n        //     this.Config.bottomHeight + 0.0011,\r\n        //     color[0],\r\n        //     color[1],\r\n        //     color[2],\r\n        //     color[3]\r\n        // );\r\n        DrawSprite("pause_menu_pages_char_mom_dad", "mumdadbg", this.Config.x, this.Config.y + (this.Config.bottomHeight + 0.0055) + 0.10894 + 0.0385, 0.225, 0.20, .0, 255, 255, 255, 255);\r\n        DrawSprite("pause_menu_pages_char_mom_dad", "vignette", this.Config.x, this.Config.y + (this.Config.bottomHeight + 0.0055) + 0.10895 + 0.0385, 0.225, 0.20, .0, 255, 255, 255, 255);\r\n        DrawSprite("char_creator_portraits", "male_" + +indexHeritagePanel[0], this.Config.x - 0.040, this.Config.y + (this.Config.bottomHeight + 0.0055) + 0.10892 + 0.0385, 0.11, 0.20, .0, 255, 255, 255, 255);\r\n        DrawSprite("char_creator_portraits", "female_" + indexHeritagePanel[1], this.Config.x + 0.040, this.Config.y + (this.Config.bottomHeight + 0.0055) + 0.10892 + 0.0385, 0.11, 0.20, .0, 255, 255, 255, 255);\r\n    }\r\n    static controlMenu() {\r\n        var _a, _b;\r\n        if (IsControlJustPressed(0, 27)) {\r\n            if (this.Menu.IndexButton <= 0) {\r\n                this.Menu.IndexButton = this.CurrentMenu.buttons.length - 1;\r\n            }\r\n            else {\r\n                this.Menu.IndexButton--;\r\n            }\r\n        }\r\n        else if (IsControlJustPressed(0, 173)) {\r\n            if (this.Menu.IndexButton >= this.CurrentMenu.buttons.length - 1) {\r\n                this.Menu.IndexButton = 0;\r\n            }\r\n            else {\r\n                this.Menu.IndexButton++;\r\n            }\r\n        }\r\n        else if (IsControlJustPressed(0, 201)) {\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].onClick) {\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].onClick();\r\n            }\r\n            else if (this.CurrentMenu.buttons[this.Menu.IndexButton].checkbox) {\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].statusCheckbox =\r\n                    !this.CurrentMenu.buttons[this.Menu.IndexButton].statusCheckbox;\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].checkbox(this.CurrentMenu.buttons[this.Menu.IndexButton].statusCheckbox);\r\n            }\r\n        }\r\n        else if (IsControlJustPressed(0, 202)) {\r\n            if (this.Menu.submenu[0] == true) {\r\n                this.closeSubMenu();\r\n            }\r\n            else {\r\n                this.closeMenu();\r\n            }\r\n        }\r\n        else if (IsControlJustPressed(0, 174)) {\r\n            // left just press\r\n            console.log("left just press");\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].slider ||\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].slideNum) {\r\n                // Sliders\r\n                const indexSlider = this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider || 0;\r\n                const lenghtSlider = this.CurrentMenu.buttons[this.Menu.IndexButton]\r\n                    .slider\r\n                    ? ((_a = this.CurrentMenu.buttons[this.Menu.IndexButton].slider) === null || _a === void 0 ? void 0 : _a.length) || 0\r\n                    : this.CurrentMenu.buttons[this.Menu.IndexButton].slideNum || 0;\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider =\r\n                    indexSlider > 0 ? indexSlider - 1 : lenghtSlider - 1;\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].onSlide(this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider);\r\n            }\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].onColorPanel) {\r\n                const indexColorPanel = this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel || 0;\r\n                const lenghtColorPanel = this.CurrentMenu.buttons[this.Menu.IndexButton].lenghtColorPanel || 0;\r\n                if (indexColorPanel <= 0) {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel =\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].lenghtColorPanel;\r\n                }\r\n                else {\r\n                    if (indexColorPanel > 8) {\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].showColorPanel = -1;\r\n                    }\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel =\r\n                        indexColorPanel - 1; // remove 1\r\n                }\r\n                console.log(this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel);\r\n            }\r\n        }\r\n        else if (IsControlJustPressed(0, 175)) {\r\n            // right just press\r\n            console.log("right just press");\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].slider ||\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].slideNum) {\r\n                // Sliders\r\n                const indexSlider = this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider || 0;\r\n                const lenghtSlider = this.CurrentMenu.buttons[this.Menu.IndexButton]\r\n                    .slider\r\n                    ? ((_b = this.CurrentMenu.buttons[this.Menu.IndexButton].slider) === null || _b === void 0 ? void 0 : _b.length) || 0\r\n                    : this.CurrentMenu.buttons[this.Menu.IndexButton].slideNum || 0;\r\n                if (indexSlider >= lenghtSlider - 1) {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider = 0;\r\n                }\r\n                else {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider =\r\n                        indexSlider + 1;\r\n                }\r\n                this.CurrentMenu.buttons[this.Menu.IndexButton].onSlide(this.CurrentMenu.buttons[this.Menu.IndexButton].indexSlider);\r\n            }\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].onColorPanel) {\r\n                const indexColorPanel = this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel || 0;\r\n                const lenghtColorPanel = this.CurrentMenu.buttons[this.Menu.IndexButton].lenghtColorPanel || 0;\r\n                if (indexColorPanel >= lenghtColorPanel) {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel = 0;\r\n                }\r\n                else {\r\n                    if (indexColorPanel > 8) {\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].showColorPanel = +1;\r\n                    }\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel =\r\n                        indexColorPanel + 1; // remove 1\r\n                }\r\n                console.log(this.CurrentMenu.buttons[this.Menu.IndexButton].indexColorPanel);\r\n            }\r\n        }\r\n        else if (IsControlPressed(0, 174)) {\r\n            // left press\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].onPourcentage) {\r\n                if (this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage <= 0) {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage =\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage = 100;\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].onPourcentage(this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage);\r\n                }\r\n                else {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage =\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage -\r\n                            1;\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].onPourcentage(this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage);\r\n                }\r\n            }\r\n        }\r\n        else if (IsControlPressed(0, 175)) {\r\n            // right press\r\n            if (this.CurrentMenu.buttons[this.Menu.IndexButton].onPourcentage) {\r\n                if (this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage >=\r\n                    100) {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage =\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage = 0;\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].onPourcentage(this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage);\r\n                }\r\n                else {\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage =\r\n                        this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage +\r\n                            1;\r\n                    this.CurrentMenu.buttons[this.Menu.IndexButton].onPourcentage(this.CurrentMenu.buttons[this.Menu.IndexButton].valuePourcentage);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    static drawMenu() {\r\n        if (this.Menu.Opened) {\r\n            this.drawHeader();\r\n            this.drawButtons();\r\n            this.controlMenu();\r\n        }\r\n    }\r\n    static openSubmenu(name) {\r\n        this.Menu.IndexButton = 0;\r\n        this.CurrentMenu = this.CurrentMenu.submenus[name];\r\n        this.Menu.submenu = [true, name];\r\n    }\r\n    static closeSubMenu() {\r\n        this.Menu.IndexButton = 0;\r\n        this.CurrentMenu = this.Temp;\r\n        this.Menu.submenu = [false, ")"];\r\n    }\r\n    static openMenu(obj) {\r\n        SetStreamedTextureDictAsNoLongerNeeded("pause_menu_pages_char_mom_dad");\r\n        SetStreamedTextureDictAsNoLongerNeeded("char_creator_portraits");\r\n        RequestStreamedTextureDict("pause_menu_pages_char_mom_dad", false);\r\n        RequestStreamedTextureDict("char_creator_portraits", false);\r\n        this.Menu.Opened = true;\r\n        this.CurrentMenu = obj;\r\n        this.Temp = obj;\r\n        this.drawMenu();\r\n    }\r\n    static resetMenu() {\r\n        this.Menu.IndexButton = 0;\r\n        this.Temp = {\r\n            name: "",\r\n            subtitle: "",\r\n            glare: false,\r\n            buttons: [],\r\n            submenus: {},\r\n            heritagePanel: false,\r\n            indexHeritagePanel: [0, 0, 0, 0]\r\n        };\r\n        this.CurrentMenu = {\r\n            name: "",\r\n            subtitle: "",\r\n            glare: false,\r\n            buttons: [],\r\n            submenus: {},\r\n            heritagePanel: false,\r\n            indexHeritagePanel: [0, 0, 0, 0]\r\n        };\r\n    }\r\n    static updateIndexHeritagePanel(i, c) {\r\n        if (this.CurrentMenu.indexHeritagePanel !== undefined) {\r\n            this.CurrentMenu.indexHeritagePanel[i] = c;\r\n        }\r\n    }\r\n    static closeMenu() {\r\n        this.resetMenu();\r\n        this.Menu.Opened = false;\r\n    }\r\n}\r\nexports.CoraUI = CoraUI;\r\nCoraUI.Config = {\r\n    colors: {\r\n        dark: {\r\n            header: [16, 16, 16, 255],\r\n        },\r\n        white: {\r\n            header: [250, 242, 117, 255],\r\n        },\r\n    },\r\n    x: 0.87,\r\n    y: 0.13,\r\n    width: 0.225,\r\n    bottomHeight: 0.029,\r\n    headerHeight: 0.095,\r\n    colorProps: 0.04,\r\n    glare: true,\r\n    SettingsCheckbox: {\r\n        Dictionary: "commonmenu",\r\n        TexturesUnchecked: "shop_box_blank",\r\n        TexturesChecked: "shop_box_tick",\r\n        TexturesCheckedOver: "shop_box_tickb",\r\n    },\r\n    SettingsPercentagePanel: {\r\n        Text: {\r\n            Middle: { X: 215.5, Y: 15, Scale: 0.35 },\r\n        },\r\n    },\r\n    ColoursPanel: [\r\n        [255, 255, 255, 255],\r\n        [240, 240, 240, 255],\r\n        [0, 0, 0, 255],\r\n        [155, 155, 155, 255],\r\n        [205, 205, 205, 255],\r\n        [77, 77, 77, 255],\r\n        [224, 50, 50, 255],\r\n        [240, 153, 153, 255],\r\n        [112, 25, 25, 255],\r\n        [93, 182, 229, 255],\r\n        [174, 219, 242, 255],\r\n        [47, 92, 115, 255],\r\n        [240, 200, 80, 255],\r\n        [254, 235, 169, 255],\r\n        [126, 107, 41, 255],\r\n        [255, 133, 85, 255],\r\n        [255, 194, 170, 255],\r\n        [127, 66, 42, 255],\r\n        [114, 204, 114, 255],\r\n        [185, 230, 185, 255],\r\n        [57, 102, 57, 255],\r\n        [132, 102, 226, 255],\r\n        [192, 179, 239, 255],\r\n        [67, 57, 111, 255],\r\n        [203, 54, 148, 255],\r\n        [255, 215, 0, 255],\r\n        [255, 228, 181, 255],\r\n        [240, 230, 140, 255], // Khaki\r\n    ],\r\n};\r\nCoraUI.Menu = {\r\n    Opened: false,\r\n    MenuOpened: "",\r\n    submenu: [false, ""],\r\n    IndexButton: 0,\r\n};\r\nCoraUI.Temp = {\r\n    name: "",\r\n    subtitle: "",\r\n    glare: false,\r\n    buttons: [],\r\n    submenus: {},\r\n    heritagePanel: false,\r\n    indexHeritagePanel: [0, 0, 0, 0]\r\n};\r\nCoraUI.CurrentMenu = {\r\n    name: "",\r\n    subtitle: "",\r\n    glare: false,\r\n    buttons: [],\r\n    submenus: {},\r\n    heritagePanel: false,\r\n    indexHeritagePanel: [0, 0, 0, 0]\r\n};\r\nsetTick(() => {\r\n    if (CoraUI.Menu.Opened) {\r\n        CoraUI.drawMenu();\r\n    }\r\n});\r\n// exports(\'CreateMenu\', (arg: any) => {\r\n//     CoraUI.openMenu(arg);\r\n// })\r\n\n\n//# sourceURL=webpack://resource-name/./client/lib/Menu/index.ts?')},"./client/lib/Menu/utils.ts":(__unused_webpack_module,exports)=>{eval('\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.calc = exports.DrawRectg = exports.RenderSprite = exports.DrawText2 = void 0;\r\nconst DrawText2 = (content, x, y, scale, font, color, intAlign, wrap) => {\r\n    SetTextFont(font);\r\n    SetTextScale(scale, scale);\r\n    if (intAlign) {\r\n        SetTextCentre(true);\r\n    }\r\n    else {\r\n        SetTextJustification(intAlign || 1);\r\n        if (intAlign == 2) {\r\n            SetTextWrap(0.0, wrap || x);\r\n        }\r\n    }\r\n    SetTextEntry("STRING");\r\n    SetTextColour(color[0], color[1], color[2], color[3]);\r\n    AddTextComponentString(content);\r\n    DrawText(x, y);\r\n};\r\nexports.DrawText2 = DrawText2;\r\nconst RenderSprite = (TextureDictionary, TextureName, X, Y, Width, Height, Heading, R, G, B, A) => {\r\n    var [Xe, Ye] = GetScreenResolution();\r\n    X: X || 0 / Xe;\r\n    Y: Y || 0 / Ye;\r\n    Width: Width || 0 / Xe;\r\n    Height: Height || 0 / Ye;\r\n    if (!HasStreamedTextureDictLoaded(TextureDictionary)) {\r\n        RequestStreamedTextureDict(TextureDictionary, true);\r\n    }\r\n    DrawSprite(TextureDictionary, TextureName, X + Width * 0.5, Y + Height * 0.5, Width, Height, Heading || 0, R, G, B, A);\r\n};\r\nexports.RenderSprite = RenderSprite;\r\nconst DrawRectg = (x, y, w, h, color) => {\r\n    DrawRect(x + w / 2, y + h / 2, w, h, color[0], color[1], color[2], color[3]);\r\n};\r\nexports.DrawRectg = DrawRectg;\r\nconst calc = (n) => {\r\n    return 100 / n;\r\n};\r\nexports.calc = calc;\r\n\n\n//# sourceURL=webpack://resource-name/./client/lib/Menu/utils.ts?')},"./client/lib/Modules/vRP.ts":function(__unused_webpack_module,exports,__webpack_require__){eval("\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\r\nexports.vRPModule = exports.MAC = void 0;\r\nconst client_1 = __webpack_require__(/*! ../../client */ \"./client/client.ts\");\r\nconst client_2 = __webpack_require__(/*! @vrpjs/client */ \"./node_modules/@vrpjs/client/lib/index.js\");\r\nconst Wait_1 = __webpack_require__(/*! ../../../shared/Wait */ \"./shared/Wait.ts\");\r\nconst Menu_1 = __webpack_require__(/*! ../Menu */ \"./client/lib/Menu/index.ts\");\r\nconst vRP = client_2.VrpProxy.getInterface('vRP');\r\nexports.MAC = client_2.VrpTunnel.getInterface(GetCurrentResourceName());\r\nconst MAClient = {};\r\nclient_2.VrpTunnel.bindInterface(GetCurrentResourceName(), MAClient);\r\nclient_2.VrpProxy.addInterface(GetCurrentResourceName(), MAClient);\r\nlet flags = 0;\r\nlet isVisible = true;\r\nvar vRPModule;\r\n(function (vRPModule) {\r\n    class Init {\r\n        constructor() {\r\n            this.initvRP();\r\n        }\r\n        initvRP() {\r\n            initvRP();\r\n        }\r\n    }\r\n    vRPModule.Init = Init;\r\n    function initvRP() {\r\n        noClipHandler();\r\n        RegisterCommand('minty', () => __awaiter(this, void 0, void 0, function* () {\r\n            if (yield exports.MAC.Configs('permission')) {\r\n                Menu_1.CoraUI.openMenu({\r\n                    name: 'Minty Menu',\r\n                    subtitle: \"Menu de interações \",\r\n                    glare: true,\r\n                    submenus: {\r\n                        'Admin': {\r\n                            name: 'Minty Admin Menu',\r\n                            subtitle: \"\",\r\n                            glare: true,\r\n                            buttons: [\r\n                                { name: 'Invisível', checkbox: (bool) => {\r\n                                        if (bool) {\r\n                                            const ped = PlayerPedId();\r\n                                            isVisible = false;\r\n                                            SetEntityVisible(ped, false, null);\r\n                                            SetEntityLocallyVisible(ped);\r\n                                        }\r\n                                        else {\r\n                                            const ped = PlayerPedId();\r\n                                            isVisible = true;\r\n                                            SetEntityVisible(ped, true, null);\r\n                                        }\r\n                                    } },\r\n                                { name: 'Limpar Area', onClick: () => {\r\n                                        const [x, y, z] = GetEntityCoords(PlayerPedId(), true);\r\n                                        exports.MAC.Menu('clearArea', x, y, z);\r\n                                    }\r\n                                }\r\n                            ],\r\n                        },\r\n                        'Panel': {\r\n                            name: 'Minty Panel Menu',\r\n                            subtitle: \"\",\r\n                            glare: true,\r\n                            buttons: [\r\n                                { name: 'Recarregar Configuraçoes', onClick: () => console.log('under development') },\r\n                            ],\r\n                        }\r\n                    },\r\n                    buttons: [\r\n                        { name: 'Admin Options', onClick: () => Menu_1.CoraUI.openSubmenu('Admin') },\r\n                        { name: 'Panel Options', onClick: () => Menu_1.CoraUI.openSubmenu('Panel') },\r\n                        { name: '~r~Close Menu', onClick: () => Menu_1.CoraUI.closeMenu() },\r\n                    ],\r\n                });\r\n            }\r\n        }), false);\r\n        setTick(() => __awaiter(this, void 0, void 0, function* () {\r\n            if (client_1.Spawned) {\r\n                noClipHandler();\r\n                const weapons = yield exports.MAC.Configs('weapontable');\r\n                const ped = PlayerPedId();\r\n                const pid = PlayerId();\r\n                const pped = GetPlayerPed(-1);\r\n                const [x, y, z] = GetEntityCoords(ped, true);\r\n                const [retval, bulletProof, fireProof, explosionProof, collisionProof, meleeProof, steamProof, p7, drownProof] = GetEntityProofs(ped);\r\n                const damage = GetPlayerWeaponDamageModifier(pid);\r\n                let playerBlips = 0;\r\n                const playersOnline = GetActivePlayers();\r\n                if (yield exports.MAC.Configs('weapons')) {\r\n                    for (let v of weapons) {\r\n                        if (HasPedGotWeapon(ped, GetHashKey(v), false)) {\r\n                            if (!(yield exports.MAC.Configs('permission'))) {\r\n                                const weapons = vRP.getWeapons();\r\n                                RemoveAllPedWeapons(ped, true);\r\n                                flags = flags + 1;\r\n                                exports.MAC.Violation('weapon', weapons, flags);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                if (damage > 1.0) {\r\n                    if (!(yield exports.MAC.Configs('permission'))) {\r\n                        const weapon = GetSelectedPedWeapon(ped);\r\n                        if (weapon != -1569615261) {\r\n                            flags = flags + 1;\r\n                            exports.MAC.Violation('damage_modifier', weapon, damage, flags);\r\n                        }\r\n                    }\r\n                }\r\n                if (bulletProof == 1 && fireProof == 1 && explosionProof == 1 && meleeProof == 1) {\r\n                    if (!(yield exports.MAC.Configs('permission'))) {\r\n                        flags = flags + 1;\r\n                        exports.MAC.Violation('godmode', flags);\r\n                    }\r\n                }\r\n                if (NetworkIsInSpectatorMode()) {\r\n                    CancelEvent();\r\n                    if (!(yield exports.MAC.Configs('permission'))) {\r\n                        flags = flags + 1;\r\n                        exports.MAC.Violation('spectator', flags);\r\n                    }\r\n                }\r\n                if (!IsPedInAnyVehicle(pped, false) && !IsPedRagdoll(pped) && !IsPedFalling(pped) && IsPedJumping(pped)) {\r\n                    if (GetEntitySpeed(pped) > 7.5) {\r\n                        if (!(yield exports.MAC.Configs('permission'))) {\r\n                            flags = flags + 1;\r\n                            exports.MAC.Violation('super_speed', flags, GetEntitySpeed(ped));\r\n                        }\r\n                    }\r\n                }\r\n                // if ( GetFinalRenderedCamFov() === 70 ) {\r\n                //     if ( !await MAC.Configs('permission') ) {\r\n                //         flags = flags + 1\r\n                //         MAC.Violation('spmenu', flags)\r\n                //     }\r\n                // }\r\n                if (!(yield exports.MAC.Configs('permission'))) {\r\n                    if (isVisible === true) {\r\n                        const pid = GetPlayerPed(-1);\r\n                        if (GetGameTimer() - 120000 > 0) {\r\n                            if (!IsEntityVisible(pid)) {\r\n                                SetEntityVisible(pid, true, false);\r\n                                exports.MAC.Violation('invisivel');\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n                for (let i = 0; i < playersOnline.length; i++) {\r\n                    const id = playersOnline[i];\r\n                    const pid = GetPlayerPed(id);\r\n                    if (pid != PlayerPedId()) {\r\n                        const blip = GetBlipFromEntity(pid);\r\n                        if (!DoesBlipExist(blip)) {\r\n                        }\r\n                        else {\r\n                            playerBlips = playerBlips + 1;\r\n                        }\r\n                    }\r\n                }\r\n                if (playerBlips > 0) {\r\n                    flags = flags + 1;\r\n                    exports.MAC.Violation('blips', flags);\r\n                }\r\n            }\r\n            yield Wait_1.Wait(2000);\r\n        }));\r\n        onNet('MintyMenu', (...args) => {\r\n            switch (args[0]) {\r\n                case 'clearArea':\r\n                    ClearAreaOfEverything(args[1], args[2], args[3], 100.0, false, false, false, false);\r\n            }\r\n        });\r\n        MAClient.takeScreenshot = () => __awaiter(this, void 0, void 0, function* () {\r\n            try {\r\n                let result = '';\r\n                yield __webpack_require__.g.exports['screenshot-basic']['requestScreenshotUpload']('https://i.mintymanager.com/upload', 'file', (data) => {\r\n                    result = data;\r\n                });\r\n                yield Wait_1.Wait(2000);\r\n                return `https://i.mintymanager.com/uploads/${result}`;\r\n            }\r\n            catch (e) {\r\n                return console.log('Screenshot-basic not started');\r\n            }\r\n        });\r\n    }\r\n    vRPModule.initvRP = initvRP;\r\n})(vRPModule = exports.vRPModule || (exports.vRPModule = {}));\r\nfunction noClipHandler() {\r\n    setTick(() => __awaiter(this, void 0, void 0, function* () {\r\n        if (!(yield exports.MAC.Configs('permission'))) {\r\n            if (yield exports.MAC.Configs('noclip')) {\r\n                const [x, y, z] = GetEntityCoords(PlayerPedId(), true);\r\n                const ped = PlayerPedId();\r\n                const still = IsPedStill(ped);\r\n                const speed = GetEntitySpeed(ped);\r\n                yield Wait_1.Wait(3000);\r\n                const [x2, y2, z2] = GetEntityCoords(PlayerPedId(), true);\r\n                const newPed = PlayerPedId();\r\n                if (GetDistanceBetweenCoords(x, y, z, x2, y2, z2, false) > 70 && still === IsPedStill(ped) && speed === GetEntitySpeed(ped) && ped === newPed && !IsPedInAnyVehicle(ped, true) && !IsPedInParachuteFreeFall(ped) && !IsPedFalling(ped)) {\r\n                    SetEntityCoords(ped, x, y, z, true, false, false, false);\r\n                }\r\n            }\r\n            // if ( await MAC.Configs('noclip') ) {\r\n            //     const [retval, floor]: [boolean, number] = GetGroundZFor_3dCoord(x2,y2,z2, false)\r\n            //     if ( !IsPedInAnyVehicle(PlayerPedId(), true) && z2 - floor >= 10 && !IsPedFalling(PlayerPedId()) && y-y2 > 65 || y-y2 < -65 ) {\r\n            //         SetEntityCoords(PlayerPedId(), x,y,z, true, false, false, false)\r\n            //     }\r\n            // }\r\n        }\r\n    }));\r\n}\r\n\n\n//# sourceURL=webpack://resource-name/./client/lib/Modules/vRP.ts?")},"./shared/Wait.ts":function(__unused_webpack_module,exports){eval('\r\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n};\r\nObject.defineProperty(exports, "__esModule", ({ value: true }));\r\nexports.Wait = void 0;\r\nfunction Wait(ms) {\r\n    return __awaiter(this, void 0, void 0, function* () {\r\n        return new Promise((res) => {\r\n            setTimeout(res, ms);\r\n        });\r\n    });\r\n}\r\nexports.Wait = Wait;\r\n\n\n//# sourceURL=webpack://resource-name/./shared/Wait.ts?')}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var r=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e].call(r.exports,r,r.exports,__webpack_require__),r.exports}__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}();var __webpack_exports__=__webpack_require__("./client/client.ts")})();
